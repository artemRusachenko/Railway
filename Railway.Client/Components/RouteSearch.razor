@using Microsoft.AspNetCore.Components.Forms
@using Railway.Client.Services
@using Railway.Shared.DTOs
@using Railway.Shared.Requests
@inject NavigationManager Navigation
@inject IRouteService RouteService

<div class="container mt-4">
    <div class="row justify-content-between align-items-start">

        <div class="col-md-4 d-flex justify-content-end mb-3">
            <button type="button" class="btn btn-outline-secondary w-100" @onclick="GoToMyTickets">
                Мої квитки
            </button>

        </div>
        <div class="col-md-8">   
        <EditForm Model="@request" OnValidSubmit="HandleValidSubmit" class="p-4 bg-light rounded shadow-sm" style="max-width: 480px; margin:auto;">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger mb-3" />

        <div class="mb-3">
            <label class="form-label fw-semibold">Станція відправлення</label>
            <InputSelect class="form-select" @bind-Value="DepStation">
                <option value="0" disabled>-- Виберіть --</option>
                @foreach (var station in DepStations)
                {
                    <option value="@station.Id">@station.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => DepStation)" class="text-danger" />
        </div>

        <div class="mb-3">
            <label class="form-label fw-semibold">Станція прибуття</label>
            <InputSelect class="form-select" @bind-Value="request.ArrStation">
                <option value="0" disabled>-- Виберіть --</option>
                @foreach (var station in ArrStations)
                {
                    <option value="@station.Id">@station.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => request.ArrStation)" class="text-danger" />
        </div>

        <div class="mb-4">
            <label class="form-label fw-semibold">Дата відправлення</label>
            <InputDate class="form-control" @bind-Value="request.DepatureDate" />
        </div>

        <button type="submit" class="btn btn-primary w-100" disabled="@(request.DepStation == 0 || request.ArrStation == 0)">
            Знайти
        </button>
    </EditForm>
        </div>

    </div>
</div>
@code {
    private RouteSearchRequest request = new()
    {
        DepStation = 0,
        ArrStation = 0,
        DepatureDate = DateTime.Today
    };

    private List<StationForRouteDTO> DepStations = new();
    private List<StationForRouteDTO> ArrStations = new();

    private int depStation;
    private int DepStation
    {
        get => depStation;
        set
        {
            if (depStation != value)
            {
                depStation = value;
                request.DepStation = value; // Обновляем модель запроса
                _ = OnDepStationChangedAsync(depStation);
            }
        }
    }

    [Parameter]
    public EventCallback<RouteSearchRequest> OnSearch { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DepStations = await RouteService.GetStationsForRouteAsync(null, isArrival: false);
    }

    private async Task OnDepStationChangedAsync(int depStationId)
    {
        if (depStationId != 0)
        {
            ArrStations = await RouteService.GetStationsForRouteAsync(depStationId, isArrival: true);
        }
        else
        {
            ArrStations.Clear();
        }
        request.ArrStation = 0;

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleValidSubmit()
    {
        if (request.DepStation != 0 && request.ArrStation != 0)
        {
            await OnSearch.InvokeAsync(request);
        }
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    private void GoToMyTickets()
    {
        var uri = $"mytickets";
        NavigationManager.NavigateTo(uri);
    }
}
